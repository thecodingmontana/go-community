services:
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    volumes:
      - ./.env:/app/.env
    ports:
      - "8001:8001"
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:8001/v1/api/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - go-community-network

  frontend:
    build:
      context: ./app
      dockerfile: Dockerfile
    volumes:
      - ./app/.output:/app/.output  # Mount .output directory as a volume
      - ./.env:/app/.env
    ports:
      - "3002:3002"
    environment:
      - NUXT_PUBLIC_API_URL=${NUXT_PUBLIC_API_URL}
      - NITRO_PORT=${NITRO_PORT}
      - NUXT_PUBLIC_SITE_URL=${NUXT_PUBLIC_SITE_URL}
      - NUXT_PUBLIC_SITE_NAME=${NUXT_PUBLIC_SITE_NAME}
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://frontend:3002"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - go-community-network

  db:
    image: postgres:15-alpine
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - go-community-network

volumes:
  postgres_data:

networks:
  go-community-network:
    driver: bridge